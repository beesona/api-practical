name: Deploy Microservice
 
on: deployment
 
jobs:
  build:
    name: ${{ github.event.deployment.environment }}-build
    runs-on: ubuntu-latest
    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.SERVICING_DEPLOY_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SERVICING_DEPLOY_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.SERVICING_DEPLOY_AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
 
      - name: checkout repository
        id: checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.deployment.ref}}
      


      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"


      - name: Setup variables
        run: |
          export SERVICENAME=$(jq -r .ServiceName .github/workflows/options.json)
          export DATABASENAME=$(jq -r .DatabaseName .github/workflows/options.json)
          export ENVIRONMENT=${{ github.event.deployment.environment}}
          export COMMITID=${{ github.event.deployment.ref }}
          export HTMLURL=${{ github.event.repository.html_url}}
          export COMMITURL="$HTMLURL/commit/$COMMITID"
          export CODEURL="$HTMLURL/tree/$COMMITID"
          export ACTIONSURL="$HTMLURL/actions/runs/${{ github.run_id }}"
          export COMMITMESSAGE=$(git log --format=%B -n 1 $COMMITID)
          echo "SERVICENAME=$SERVICENAME" >> $GITHUB_ENV
          echo "DATABASENAME=$DATABASENAME" >> $GITHUB_ENV
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "COMMITID=$COMMITID" >> $GITHUB_ENV
          echo "HTMLURL=$HTMLURL" >> $GITHUB_ENV
          echo "COMMITURL=$COMMITURL" >> $GITHUB_ENV
          echo "CODEURL=$CODEURL" >> $GITHUB_ENV
          echo "ACTIONSURL=$ACTIONSURL" >> $GITHUB_ENV
          echo "COMMITMESSAGE=$COMMITMESSAGE" >> $GITHUB_ENV
          echo "TEAMSURL=https://outlook.office.com/webhook/297225ee-7306-43e6-9bbf-3b620ce7c9cc@5a5b9e61-20b2-4578-8f37-246881fa0d61/IncomingWebhook/66a7f59f31cc42f5b2ac6a652f43a331/7ac909ce-260b-45cf-a553-7d7ca24c5e91" >> $GITHUB_ENV
          echo "DEPLOYURL=$HTMLURL/deployments?environment=$ENVIRONMENT#activity-log" >> $GITHUB_ENV
          if [ $ENVIRONMENT = "dev" ]; then
            echo "AWSACCOUNT=047738714325" >> $GITHUB_ENV
          elif [ $ENVIRONMENT = "qa"  ]; then
            echo "AWSACCOUNT=100197454175" >> $GITHUB_ENV
          elif [ $ENVIRONMENT = "train"  ]; then
            echo "AWSACCOUNT=473415446686" >> $GITHUB_ENV
          elif [ $ENVIRONMENT = "prod"  ]; then
            echo "AWSACCOUNT=859196241863" >> $GITHUB_ENV
          else
            echo "AWSACCOUNT=047738714325" >> $GITHUB_ENV
          fi        
    
      - name: Set deployment status in-progress 
        uses: actions/github-script@v1
        with:
          previews: flash-preview
          script: |
            github.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ github.event.deployment.id }},
              state: "in_progress"
            })      
      
      - name: Send Teams update in-progress
        run: |
          export TITLE="${{ env.SERVICENAME}} - In-Progress"
          export TEXT="<table><tr><td><b>Environment:</b></td><td><a href='${{ env.DEPLOYURL }}'>${{ env.ENVIRONMENT }}</a></td></tr><tr><td><b>Commit Id:</b></td><td><a href='${{ env.CODEURL}}'>${{ env.COMMITID }}</a></td></tr><tr><td><b>Commit Message:</b></td><td><a href='${{ env.COMMITURL }}'>${{ env.COMMITMESSAGE }}</a></td></tr><tr><td><b>Status:</b></td><td><a href='${{ env.ACTIONSURL }}'>In-Progress</a></td></tr></table>"
          export TEAMSCARD=$(jq --arg title "$TITLE" --arg text "$TEXT"  '.title = $title | .text = $text' -r .github/workflows/teamscard.json)
          curl \
          -H 'Content-Type: application/json' \
          -d "$TEAMSCARD" \
          -X POST \
          ${{ env.TEAMSURL }}


      - name: Build using ECR image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: velocitybuild
          IMAGE_TAG: latest
          AWSSECRET: ${{ secrets.SERVICING_DEPLOY_AWS_SECRET_ACCESS_KEY }}
          AWSKEY: ${{ secrets.SERVICING_DEPLOY_AWS_ACCESS_KEY_ID }}
          AWSREGION: ${{ secrets.SERVICING_DEPLOY_AWS_REGION }}
          ENVIRONMENT: ${{ github.event.deployment.environment }}
        run: |
          docker run \
          -e SERVICE_NAME=${{ env.SERVICENAME }} \
          -e DATABASE=${{ env.DATABASENAME }} \
          -e S3BUCKET='quasar-deploy-artifacts' \
          -e BUILD_ENV=${{ github.event.deployment.environment }} \
          -e COMMITID=${{ github.event.deployment.ref }} \
          -e AWSKEY=$AWSKEY \
          -e AWSSECRET=$AWSSECRET \
          -e AWSREGION=$AWSREGION \
          -e AWSACCOUNT=${{ env.AWSACCOUNT }} \
          -v ${PWD}:/${{ env.SERVICENAME }} -w /${{ env.SERVICENAME }} \
          $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update deployment status outcome
        if: ${{ always() }}
        uses: actions/github-script@v1
        with:
          previews: flash-preview,ant-man-preview
          script: |
            github.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ github.event.deployment.id }},
              state: "${{ steps.build-image.outcome }}",
              auto_inactive: ${{ steps.build-image.outcome == 'success' }}
            })

      - name: Send Teams update result
        if: ${{ always() }}
        run: |
          if [ ${{ steps.build-image.outcome }} = "success" ]; then
            export TITLE="${{ env.SERVICENAME}} - SUCCESS"
            export THEMECOLOR="00FF00"
            export STATUS="Success"
          else
            export TITLE="${{ env.SERVICENAME}} - FAIL"
            export THEMECOLOR="FF0000"
            export STATUS="Failure"
          fi  
          export TEXT="<table><tr><td><b>Environment:</b></td><td><a href='${{ env.DEPLOYURL }}'>${{ env.ENVIRONMENT }}</a></td></tr><tr><td><b>Commit Id:</b></td><td><a href='${{ env.CODEURL}}'>${{ env.COMMITID }}</a></td></tr><tr><td><b>Commit Message:</b></td><td><a href='${{ env.COMMITURL }}'>${{ env.COMMITMESSAGE }}</a></td></tr><tr><td><b>Status:</b></td><td><a href='${{ env.ACTIONSURL }}'>$STATUS</a></td></tr></table>"
          export TEAMSCARD=$(jq --arg title "$TITLE" --arg text "$TEXT" --arg themecolor "$THEMECOLOR" '.title = $title | .text = $text | .themeColor = $themecolor' -r .github/workflows/teamscard.json)
          curl \
          -H 'Content-Type: application/json' \
          -d "$TEAMSCARD" \
          -X POST \
          ${{ env.TEAMSURL }}

      - name: upload-artifact    
        uses: actions/upload-artifact@v1
        with:
          name: ${{ github.event.deployment.environment }}-artifact
          path: ./dist
